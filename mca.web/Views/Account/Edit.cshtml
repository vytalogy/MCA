@model mca.web.Models.RegistorViewModel
@{
    ViewBag.Title = "Edit";
}

<div class="container-fluid">
    <div class="container">
        <div class="row">
            <div class="page-heading">
                <img class="img-responsive" src="~/Images/form.png" alt="search-icon-small">
                <h1>Edit User</h1>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "Account"))
{
    @Html.HiddenFor(m=>m.id)
    <div class="container-fluid">
        <div class="container container-bg page-height">
            <div class="row">
                <div class="registraion-form">@Html.ValidationSummary()
                    <section class="content-r bgcolor-6">
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            <span class="input input--ruri">
                                @Html.TextBoxFor(m => m.FirstName, new { @class = "input__field input__field--ruri", @maxlength = "20" })
                                <label class="input__label input__label--ruri" for="input-26">
                                    <span class="input__label-content input__label-content--ruri">First Name</span>
                                </label>
                            </span>
                        </div>
                        <div class="col-md-6 col-sm-6 col-xs-12">
                            <span class="input input--ruri">
                                @Html.TextBoxFor(m => m.LastName, new { @class = "input__field input__field--ruri", @maxlength = "20" })
                                <label class="input__label input__label--ruri" for="input-26">
                                    <span class="input__label-content input__label-content--ruri">Last Name</span>
                                </label>
                            </span>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <span class="input input--ruri">
                                @Html.TextBoxFor(m => m.Email, new { @class = "input__field input__field--ruri", @maxlength = "20" })
                                <label class="input__label input__label--ruri" for="input-26">
                                    <span class="input__label-content input__label-content--ruri">Email</span>
                                </label>
                            </span>
                        </div>

                        <div class="col-md-6 col-sm-6 col-xs-12">
                            <span class="input input--ruri">
                                @Html.PasswordFor(m => m.Password, new { @class = "input__field input__field--ruri", @maxlength = "20" })

                                <label class="input__label input__label--ruri" for="input-26">
                                    <span class="input__label-content input__label-content--ruri">Password</span>
                                </label>
                            </span>
                        </div>

                        <div class="col-md-6 col-sm-6 col-xs-12">
                            <span class="input input--ruri">
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "input__field input__field--ruri", @maxlength = "20" })
                                <label class="input__label input__label--ruri" for="input-26">
                                    <span class="input__label-content input__label-content--ruri">Confirm Password</span>
                                </label>
                            </span>
                        </div>

                        <div class="col-md-6 col-sm-6 col-xs-12 checkboxedd">
                            <form>
                                <div class="label-class">
                                    <label>Role</label>
                                </div>
                                <label class="radio-inline">
                                    @Html.RadioButtonFor(m => m.RoleID, "3")Web Admin
                                </label>
                                <label class="radio-inline">
                                    @Html.RadioButtonFor(m => m.RoleID, "2")Admin
                                </label>
                                <label class="radio-inline">
                                    @Html.RadioButtonFor(m => m.RoleID, "1")Standard User
                                </label>
                            </form>
                        </div>
                        <div class="clearfix"></div>
                    </section>

                    <div class="button">
                        <button type="submit" class="button">Update</button>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@section Scripts
{
    <script>

	/*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 *
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false */

( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

var classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( classie );
} else {
  // browser global
  window.classie = classie;
}

})( window );

    </script>


    <script>
			(function() {
				// trim polyfill : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
				if (!String.prototype.trim) {
					(function() {
						// Make sure we trim BOM and NBSP
						var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
						String.prototype.trim = function() {
							return this.replace(rtrim, '');
						};
					})();
				}

				[].slice.call( document.querySelectorAll( 'input.input__field' ) ).forEach( function( inputEl ) {
					// in case the input is already filled..
					if( inputEl.value.trim() !== '' ) {
						classie.add( inputEl.parentNode, 'input--filled' );
					}

					// events:
					inputEl.addEventListener( 'focus', onInputFocus );
					inputEl.addEventListener( 'blur', onInputBlur );
				} );

				function onInputFocus( ev ) {
					classie.add( ev.target.parentNode, 'input--filled' );
				}

				function onInputBlur( ev ) {
					if( ev.target.value.trim() === '' ) {
						classie.remove( ev.target.parentNode, 'input--filled' );
					}
				}
			})();
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $("#Password").val(@Model.Password);
            $("#ConfirmPassword").val(@Model.Password);
            //$('#Password').trigger('click');

            $("#Password").focus();
            $("#ConfirmPassword").focus();
            $("#FirstName").focus();
        });
    </script>
}